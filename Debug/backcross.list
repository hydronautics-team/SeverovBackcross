
backcross.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a28  08003a28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000000c  08003a3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003a3c  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e610  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002553  00000000  00000000  0002e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00030be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c86  00000000  00000000  00031bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002540  00000000  00000000  0003283e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127fd  00000000  00000000  00034d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a5c7  00000000  00000000  0004757b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004258  00000000  00000000  000d1b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d5d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080039e8 	.word	0x080039e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080039e8 	.word	0x080039e8

0800014c <backplate_init>:

int32_t real_depth = 0;
uint32_t dtick;
Device_state state = CLOSED;

void backplate_init(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    init_comm();
 8000150:	f000 f87c 	bl	800024c <init_comm>
    init_thrusters();
 8000154:	f000 ffc6 	bl	80010e4 <init_thrusters>
    init_devices();
 8000158:	f000 f8f4 	bl	8000344 <init_devices>
 //   init_sensors();
}
 800015c:	bf00      	nop
 800015e:	bd80      	pop	{r7, pc}

08000160 <backplate_loop>:

void backplate_loop(){
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	thrusters_update();
 8000164:	f000 fec6 	bl	8000ef4 <thrusters_update>
	devices_update();
 8000168:	f000 f93a 	bl	80003e0 <devices_update>

	update_com();
 800016c:	f000 f898 	bl	80002a0 <update_com>

//	uint8_t data[] = {0xAA};
//	HAL_I2C_Slave_Transmit	(&hi2c1, data, 1, HAL_MAX_DELAY);
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}

08000174 <IsChecksum8bCorrect>:
#include "checksum.h"

bool IsChecksum8bCorrect(const uint8_t *msg, uint16_t length){
 8000174:	b480      	push	{r7}
 8000176:	b087      	sub	sp, #28
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
 800017c:	460b      	mov	r3, r1
 800017e:	807b      	strh	r3, [r7, #2]
	uint8_t crcGot, crc = 0;
 8000180:	2300      	movs	r3, #0
 8000182:	75fb      	strb	r3, [r7, #23]
	int i;

	crcGot = msg[length-1] ;
 8000184:	887b      	ldrh	r3, [r7, #2]
 8000186:	3b01      	subs	r3, #1
 8000188:	687a      	ldr	r2, [r7, #4]
 800018a:	4413      	add	r3, r2
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	73fb      	strb	r3, [r7, #15]

	for (i = 1; i < length - 1; ++i) {
 8000190:	2301      	movs	r3, #1
 8000192:	613b      	str	r3, [r7, #16]
 8000194:	e009      	b.n	80001aa <IsChecksum8bCorrect+0x36>
		crc ^= msg[i];
 8000196:	693b      	ldr	r3, [r7, #16]
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	4413      	add	r3, r2
 800019c:	781a      	ldrb	r2, [r3, #0]
 800019e:	7dfb      	ldrb	r3, [r7, #23]
 80001a0:	4053      	eors	r3, r2
 80001a2:	75fb      	strb	r3, [r7, #23]
	for (i = 1; i < length - 1; ++i) {
 80001a4:	693b      	ldr	r3, [r7, #16]
 80001a6:	3301      	adds	r3, #1
 80001a8:	613b      	str	r3, [r7, #16]
 80001aa:	887b      	ldrh	r3, [r7, #2]
 80001ac:	3b01      	subs	r3, #1
 80001ae:	693a      	ldr	r2, [r7, #16]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	dbf0      	blt.n	8000196 <IsChecksum8bCorrect+0x22>
	}

	if (crc == crcGot) {
 80001b4:	7dfa      	ldrb	r2, [r7, #23]
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d101      	bne.n	80001c0 <IsChecksum8bCorrect+0x4c>
		return 1;
 80001bc:	2301      	movs	r3, #1
 80001be:	e000      	b.n	80001c2 <IsChecksum8bCorrect+0x4e>
	}
	else {
		return 0;
 80001c0:	2300      	movs	r3, #0
	}
}
 80001c2:	4618      	mov	r0, r3
 80001c4:	371c      	adds	r7, #28
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr

080001cc <parse_velocity_package>:
	WAITING_HEADER,
	RECEIVING_MESSAGE
} uart_state;

bool parse_velocity_package(uint8_t  *message)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
    if  (IsChecksum8bCorrect(message, NORMAL_REQUEST_LENGTH))  {
 80001d4:	210b      	movs	r1, #11
 80001d6:	6878      	ldr	r0, [r7, #4]
 80001d8:	f7ff ffcc 	bl	8000174 <IsChecksum8bCorrect>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d02e      	beq.n	8000240 <parse_velocity_package+0x74>
    	for(int i = 0; i < THRUSTERS_NUM; i++)
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	e00d      	b.n	8000204 <parse_velocity_package+0x38>
    	{
    		set_thruster_velocity(i, ((struct VelocityRequest*)message)->velocity[i]);
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	b2d8      	uxtb	r0, r3
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4413      	add	r3, r2
 80001f2:	3303      	adds	r3, #3
 80001f4:	f993 3000 	ldrsb.w	r3, [r3]
 80001f8:	4619      	mov	r1, r3
 80001fa:	f000 fe59 	bl	8000eb0 <set_thruster_velocity>
    	for(int i = 0; i < THRUSTERS_NUM; i++)
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	3301      	adds	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	2b05      	cmp	r3, #5
 8000208:	ddee      	ble.n	80001e8 <parse_velocity_package+0x1c>
    	}
    	for(int i =0; i<DEVICES_NUM; i++)
 800020a:	2300      	movs	r3, #0
 800020c:	60bb      	str	r3, [r7, #8]
 800020e:	e012      	b.n	8000236 <parse_velocity_package+0x6a>
    	{
    		set_device_state(i,
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	b2d8      	uxtb	r0, r3
    				((struct VelocityRequest*)message)->device_states&(1<<i));
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f993 2009 	ldrsb.w	r2, [r3, #9]
 800021a:	2101      	movs	r1, #1
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	fa01 f303 	lsl.w	r3, r1, r3
 8000222:	b25b      	sxtb	r3, r3
 8000224:	4013      	ands	r3, r2
 8000226:	b25b      	sxtb	r3, r3
    		set_device_state(i,
 8000228:	b2db      	uxtb	r3, r3
 800022a:	4619      	mov	r1, r3
 800022c:	f000 f970 	bl	8000510 <set_device_state>
    	for(int i =0; i<DEVICES_NUM; i++)
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	3301      	adds	r3, #1
 8000234:	60bb      	str	r3, [r7, #8]
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	2b01      	cmp	r3, #1
 800023a:	dde9      	ble.n	8000210 <parse_velocity_package+0x44>
    	}
        return true;
 800023c:	2301      	movs	r3, #1
 800023e:	e000      	b.n	8000242 <parse_velocity_package+0x76>
    }
    return false;
 8000240:	2300      	movs	r3, #0
}
 8000242:	4618      	mov	r0, r3
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
	...

0800024c <init_comm>:

void init_comm(){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	2120      	movs	r1, #32
 8000254:	4802      	ldr	r0, [pc, #8]	; (8000260 <init_comm+0x14>)
 8000256:	f001 fc19 	bl	8001a8c <HAL_GPIO_WritePin>
}
 800025a:	bf00      	nop
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40010c00 	.word	0x40010c00

08000264 <HAL_UART_ErrorCallback>:
	}
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4a09      	ldr	r2, [pc, #36]	; (8000294 <HAL_UART_ErrorCallback+0x30>)
 8000270:	4293      	cmp	r3, r2
 8000272:	d10a      	bne.n	800028a <HAL_UART_ErrorCallback+0x26>
        HAL_UART_DeInit(&huart1);
 8000274:	4807      	ldr	r0, [pc, #28]	; (8000294 <HAL_UART_ErrorCallback+0x30>)
 8000276:	f002 fe69 	bl	8002f4c <HAL_UART_DeInit>
        frameready = false;
 800027a:	4b07      	ldr	r3, [pc, #28]	; (8000298 <HAL_UART_ErrorCallback+0x34>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, message_buff, NORMAL_REQUEST_LENGTH);
 8000280:	220b      	movs	r2, #11
 8000282:	4906      	ldr	r1, [pc, #24]	; (800029c <HAL_UART_ErrorCallback+0x38>)
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <HAL_UART_ErrorCallback+0x30>)
 8000286:	f002 ff32 	bl	80030ee <HAL_UART_Receive_IT>
    }
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000184 	.word	0x20000184
 8000298:	20000034 	.word	0x20000034
 800029c:	20000028 	.word	0x20000028

080002a0 <update_com>:

void update_com(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	switch(uart_state)
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <update_com+0x74>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d002      	beq.n	80002b2 <update_com+0x12>
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d01d      	beq.n	80002ec <update_com+0x4c>
			parse_velocity_package(message_buff);
			status = HAL_UART_Receive(&huart1, message_buff, 1, 100);
			uart_state = WAITING_HEADER;
			break;
		}
}
 80002b0:	e02d      	b.n	800030e <update_com+0x6e>
			if(message_buff[0]==0xAA)
 80002b2:	4b19      	ldr	r3, [pc, #100]	; (8000318 <update_com+0x78>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2baa      	cmp	r3, #170	; 0xaa
 80002b8:	d10d      	bne.n	80002d6 <update_com+0x36>
				uart_state = RECEIVING_MESSAGE;
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <update_com+0x74>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
				status = HAL_UART_Receive(&huart1, &message_buff[1], NORMAL_REQUEST_LENGTH-1, 100);
 80002c0:	2364      	movs	r3, #100	; 0x64
 80002c2:	220a      	movs	r2, #10
 80002c4:	4915      	ldr	r1, [pc, #84]	; (800031c <update_com+0x7c>)
 80002c6:	4816      	ldr	r0, [pc, #88]	; (8000320 <update_com+0x80>)
 80002c8:	f002 fe6f 	bl	8002faa <HAL_UART_Receive>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b14      	ldr	r3, [pc, #80]	; (8000324 <update_com+0x84>)
 80002d2:	701a      	strb	r2, [r3, #0]
			break;
 80002d4:	e01b      	b.n	800030e <update_com+0x6e>
				status = HAL_UART_Receive(&huart1, message_buff, 1, 100);
 80002d6:	2364      	movs	r3, #100	; 0x64
 80002d8:	2201      	movs	r2, #1
 80002da:	490f      	ldr	r1, [pc, #60]	; (8000318 <update_com+0x78>)
 80002dc:	4810      	ldr	r0, [pc, #64]	; (8000320 <update_com+0x80>)
 80002de:	f002 fe64 	bl	8002faa <HAL_UART_Receive>
 80002e2:	4603      	mov	r3, r0
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <update_com+0x84>)
 80002e8:	701a      	strb	r2, [r3, #0]
			break;
 80002ea:	e010      	b.n	800030e <update_com+0x6e>
			parse_velocity_package(message_buff);
 80002ec:	480a      	ldr	r0, [pc, #40]	; (8000318 <update_com+0x78>)
 80002ee:	f7ff ff6d 	bl	80001cc <parse_velocity_package>
			status = HAL_UART_Receive(&huart1, message_buff, 1, 100);
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	2201      	movs	r2, #1
 80002f6:	4908      	ldr	r1, [pc, #32]	; (8000318 <update_com+0x78>)
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <update_com+0x80>)
 80002fa:	f002 fe56 	bl	8002faa <HAL_UART_Receive>
 80002fe:	4603      	mov	r3, r0
 8000300:	461a      	mov	r2, r3
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <update_com+0x84>)
 8000304:	701a      	strb	r2, [r3, #0]
			uart_state = WAITING_HEADER;
 8000306:	4b03      	ldr	r3, [pc, #12]	; (8000314 <update_com+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
			break;
 800030c:	bf00      	nop
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000035 	.word	0x20000035
 8000318:	20000028 	.word	0x20000028
 800031c:	20000029 	.word	0x20000029
 8000320:	20000184 	.word	0x20000184
 8000324:	20000033 	.word	0x20000033

08000328 <HAL_UART_RxCpltCallback>:

void I2C_SlaveTxCplt(I2C_HandleTypeDef *hi2c){
	i2c_master_tx_state = NONE;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	frameready = true;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <HAL_UART_RxCpltCallback+0x18>)
 8000332:	2201      	movs	r2, #1
 8000334:	701a      	strb	r2, [r3, #0]
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr
 8000340:	20000034 	.word	0x20000034

08000344 <init_devices>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void init_devices()
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
	devices[0].htim = &htim3;
 800034a:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <init_devices+0x94>)
 800034c:	4a23      	ldr	r2, [pc, #140]	; (80003dc <init_devices+0x98>)
 800034e:	601a      	str	r2, [r3, #0]
	devices[0].channel = TIM_CHANNEL_1;
 8000350:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <init_devices+0x94>)
 8000352:	2200      	movs	r2, #0
 8000354:	605a      	str	r2, [r3, #4]
	devices[0].state_poses[CLOSED] = 600;
 8000356:	4b20      	ldr	r3, [pc, #128]	; (80003d8 <init_devices+0x94>)
 8000358:	f44f 7216 	mov.w	r2, #600	; 0x258
 800035c:	811a      	strh	r2, [r3, #8]
	devices[0].state_poses[OPENED] = 350;
 800035e:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <init_devices+0x94>)
 8000360:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000364:	815a      	strh	r2, [r3, #10]

	devices[1].htim = &htim3;
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <init_devices+0x94>)
 8000368:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <init_devices+0x98>)
 800036a:	611a      	str	r2, [r3, #16]
	devices[1].channel = TIM_CHANNEL_2;
 800036c:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <init_devices+0x94>)
 800036e:	2204      	movs	r2, #4
 8000370:	615a      	str	r2, [r3, #20]
	devices[1].state_poses[CLOSED] = 480;
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <init_devices+0x94>)
 8000374:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000378:	831a      	strh	r2, [r3, #24]
	devices[1].state_poses[OPENED] = 200;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <init_devices+0x94>)
 800037c:	22c8      	movs	r2, #200	; 0xc8
 800037e:	835a      	strh	r2, [r3, #26]

	for(uint8_t i = 0; i<DEVICES_NUM; i++)
 8000380:	2300      	movs	r3, #0
 8000382:	71fb      	strb	r3, [r7, #7]
 8000384:	e01f      	b.n	80003c6 <init_devices+0x82>
	{
		devices[i].need_update = true;
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <init_devices+0x94>)
 800038a:	011b      	lsls	r3, r3, #4
 800038c:	4413      	add	r3, r2
 800038e:	330d      	adds	r3, #13
 8000390:	2201      	movs	r2, #1
 8000392:	701a      	strb	r2, [r3, #0]
		devices[i].state = CLOSED;
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <init_devices+0x94>)
 8000398:	011b      	lsls	r3, r3, #4
 800039a:	4413      	add	r3, r2
 800039c:	330c      	adds	r3, #12
 800039e:	2200      	movs	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
		HAL_TIM_PWM_Start_IT(devices[i].htim, devices[i].channel);
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	4a0c      	ldr	r2, [pc, #48]	; (80003d8 <init_devices+0x94>)
 80003a6:	011b      	lsls	r3, r3, #4
 80003a8:	4413      	add	r3, r2
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	490a      	ldr	r1, [pc, #40]	; (80003d8 <init_devices+0x94>)
 80003b0:	011b      	lsls	r3, r3, #4
 80003b2:	440b      	add	r3, r1
 80003b4:	3304      	adds	r3, #4
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	4610      	mov	r0, r2
 80003bc:	f002 f92c 	bl	8002618 <HAL_TIM_PWM_Start_IT>
	for(uint8_t i = 0; i<DEVICES_NUM; i++)
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	3301      	adds	r3, #1
 80003c4:	71fb      	strb	r3, [r7, #7]
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d9dc      	bls.n	8000386 <init_devices+0x42>
	}
}
 80003cc:	bf00      	nop
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000038 	.word	0x20000038
 80003dc:	2000013c 	.word	0x2000013c

080003e0 <devices_update>:
void devices_update()
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i<DEVICES_NUM; i++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	71fb      	strb	r3, [r7, #7]
 80003ea:	e084      	b.n	80004f6 <devices_update+0x116>
	{
		if(devices[i].need_update)
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	4a47      	ldr	r2, [pc, #284]	; (800050c <devices_update+0x12c>)
 80003f0:	011b      	lsls	r3, r3, #4
 80003f2:	4413      	add	r3, r2
 80003f4:	330d      	adds	r3, #13
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d079      	beq.n	80004f0 <devices_update+0x110>
		{
			__HAL_TIM_SET_COMPARE(devices[i].htim, devices[i].channel,
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	4a43      	ldr	r2, [pc, #268]	; (800050c <devices_update+0x12c>)
 8000400:	011b      	lsls	r3, r3, #4
 8000402:	4413      	add	r3, r2
 8000404:	3304      	adds	r3, #4
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d116      	bne.n	800043a <devices_update+0x5a>
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	79fa      	ldrb	r2, [r7, #7]
 8000410:	493e      	ldr	r1, [pc, #248]	; (800050c <devices_update+0x12c>)
 8000412:	0112      	lsls	r2, r2, #4
 8000414:	440a      	add	r2, r1
 8000416:	320c      	adds	r2, #12
 8000418:	7812      	ldrb	r2, [r2, #0]
 800041a:	4611      	mov	r1, r2
 800041c:	4a3b      	ldr	r2, [pc, #236]	; (800050c <devices_update+0x12c>)
 800041e:	00db      	lsls	r3, r3, #3
 8000420:	440b      	add	r3, r1
 8000422:	3304      	adds	r3, #4
 8000424:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	4a38      	ldr	r2, [pc, #224]	; (800050c <devices_update+0x12c>)
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	4413      	add	r3, r2
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	460a      	mov	r2, r1
 8000436:	635a      	str	r2, [r3, #52]	; 0x34
 8000438:	e053      	b.n	80004e2 <devices_update+0x102>
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	4a33      	ldr	r2, [pc, #204]	; (800050c <devices_update+0x12c>)
 800043e:	011b      	lsls	r3, r3, #4
 8000440:	4413      	add	r3, r2
 8000442:	3304      	adds	r3, #4
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b04      	cmp	r3, #4
 8000448:	d116      	bne.n	8000478 <devices_update+0x98>
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	79fa      	ldrb	r2, [r7, #7]
 800044e:	492f      	ldr	r1, [pc, #188]	; (800050c <devices_update+0x12c>)
 8000450:	0112      	lsls	r2, r2, #4
 8000452:	440a      	add	r2, r1
 8000454:	320c      	adds	r2, #12
 8000456:	7812      	ldrb	r2, [r2, #0]
 8000458:	4611      	mov	r1, r2
 800045a:	4a2c      	ldr	r2, [pc, #176]	; (800050c <devices_update+0x12c>)
 800045c:	00db      	lsls	r3, r3, #3
 800045e:	440b      	add	r3, r1
 8000460:	3304      	adds	r3, #4
 8000462:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	4a28      	ldr	r2, [pc, #160]	; (800050c <devices_update+0x12c>)
 800046a:	011b      	lsls	r3, r3, #4
 800046c:	4413      	add	r3, r2
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	460b      	mov	r3, r1
 8000474:	6393      	str	r3, [r2, #56]	; 0x38
 8000476:	e034      	b.n	80004e2 <devices_update+0x102>
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	4a24      	ldr	r2, [pc, #144]	; (800050c <devices_update+0x12c>)
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	4413      	add	r3, r2
 8000480:	3304      	adds	r3, #4
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b08      	cmp	r3, #8
 8000486:	d116      	bne.n	80004b6 <devices_update+0xd6>
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	79fa      	ldrb	r2, [r7, #7]
 800048c:	491f      	ldr	r1, [pc, #124]	; (800050c <devices_update+0x12c>)
 800048e:	0112      	lsls	r2, r2, #4
 8000490:	440a      	add	r2, r1
 8000492:	320c      	adds	r2, #12
 8000494:	7812      	ldrb	r2, [r2, #0]
 8000496:	4611      	mov	r1, r2
 8000498:	4a1c      	ldr	r2, [pc, #112]	; (800050c <devices_update+0x12c>)
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	440b      	add	r3, r1
 800049e:	3304      	adds	r3, #4
 80004a0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	4a19      	ldr	r2, [pc, #100]	; (800050c <devices_update+0x12c>)
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	4413      	add	r3, r2
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	460b      	mov	r3, r1
 80004b2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80004b4:	e015      	b.n	80004e2 <devices_update+0x102>
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	79fa      	ldrb	r2, [r7, #7]
 80004ba:	4914      	ldr	r1, [pc, #80]	; (800050c <devices_update+0x12c>)
 80004bc:	0112      	lsls	r2, r2, #4
 80004be:	440a      	add	r2, r1
 80004c0:	320c      	adds	r2, #12
 80004c2:	7812      	ldrb	r2, [r2, #0]
 80004c4:	4611      	mov	r1, r2
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <devices_update+0x12c>)
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	440b      	add	r3, r1
 80004cc:	3304      	adds	r3, #4
 80004ce:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	4a0d      	ldr	r2, [pc, #52]	; (800050c <devices_update+0x12c>)
 80004d6:	011b      	lsls	r3, r3, #4
 80004d8:	4413      	add	r3, r2
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	460b      	mov	r3, r1
 80004e0:	6413      	str	r3, [r2, #64]	; 0x40
					devices[i].state_poses[devices[i].state]);
			devices[i].need_update = false;
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <devices_update+0x12c>)
 80004e6:	011b      	lsls	r3, r3, #4
 80004e8:	4413      	add	r3, r2
 80004ea:	330d      	adds	r3, #13
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<DEVICES_NUM; i++)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	3301      	adds	r3, #1
 80004f4:	71fb      	strb	r3, [r7, #7]
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	f67f af77 	bls.w	80003ec <devices_update+0xc>
		}
	}
}
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000038 	.word	0x20000038

08000510 <set_device_state>:
void set_device_state(uint8_t address, Device_state state)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	460a      	mov	r2, r1
 800051a:	71fb      	strb	r3, [r7, #7]
 800051c:	4613      	mov	r3, r2
 800051e:	71bb      	strb	r3, [r7, #6]
	devices[address].need_update = true;
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4a09      	ldr	r2, [pc, #36]	; (8000548 <set_device_state+0x38>)
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	4413      	add	r3, r2
 8000528:	330d      	adds	r3, #13
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
	devices[address].state = state;
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	4a05      	ldr	r2, [pc, #20]	; (8000548 <set_device_state+0x38>)
 8000532:	011b      	lsls	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	330c      	adds	r3, #12
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	701a      	strb	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20000038 	.word	0x20000038

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fe1a 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f811 	bl	800057a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 fa3a 	bl	80009d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 800055c:	f000 f87c 	bl	8000658 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000560:	f000 f922 	bl	80007a8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000564:	f000 fa0a 	bl	800097c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000568:	f000 f848 	bl	80005fc <MX_I2C1_Init>
  MX_TIM3_Init();
 800056c:	f000 f996 	bl	800089c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  backplate_init();
 8000570:	f7ff fdec 	bl	800014c <backplate_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      backplate_loop();
 8000574:	f7ff fdf4 	bl	8000160 <backplate_loop>
  {
 8000578:	e7fc      	b.n	8000574 <main+0x28>

0800057a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b090      	sub	sp, #64	; 0x40
 800057e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	2228      	movs	r2, #40	; 0x28
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f003 fa01 	bl	8003990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80005b0:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0318 	add.w	r3, r7, #24
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fbc2 	bl	8001d44 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005c6:	f000 fa41 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2101      	movs	r1, #1
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fe30 	bl	8002248 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005ee:	f000 fa2d 	bl	8000a4c <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3740      	adds	r7, #64	; 0x40
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C1_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_I2C1_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C1_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_I2C1_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_I2C1_Init+0x50>)
 800061a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_I2C1_Init+0x50>)
 800063a:	f001 fa3f 	bl	8001abc <HAL_I2C_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 fa02 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000058 	.word	0x20000058
 8000650:	40005400 	.word	0x40005400
 8000654:	000186a0 	.word	0x000186a0

08000658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b092      	sub	sp, #72	; 0x48
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
 8000678:	615a      	str	r2, [r3, #20]
 800067a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2220      	movs	r2, #32
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 f984 	bl	8003990 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000688:	4b45      	ldr	r3, [pc, #276]	; (80007a0 <MX_TIM1_Init+0x148>)
 800068a:	4a46      	ldr	r2, [pc, #280]	; (80007a4 <MX_TIM1_Init+0x14c>)
 800068c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800068e:	4b44      	ldr	r3, [pc, #272]	; (80007a0 <MX_TIM1_Init+0x148>)
 8000690:	2263      	movs	r2, #99	; 0x63
 8000692:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b42      	ldr	r3, [pc, #264]	; (80007a0 <MX_TIM1_Init+0x148>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6400-1;
 800069a:	4b41      	ldr	r3, [pc, #260]	; (80007a0 <MX_TIM1_Init+0x148>)
 800069c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80006a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b3f      	ldr	r3, [pc, #252]	; (80007a0 <MX_TIM1_Init+0x148>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a8:	4b3d      	ldr	r3, [pc, #244]	; (80007a0 <MX_TIM1_Init+0x148>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ae:	4b3c      	ldr	r3, [pc, #240]	; (80007a0 <MX_TIM1_Init+0x148>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b4:	483a      	ldr	r0, [pc, #232]	; (80007a0 <MX_TIM1_Init+0x148>)
 80006b6:	f001 ff5f 	bl	8002578 <HAL_TIM_PWM_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80006c0:	f000 f9c4 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c4:	2300      	movs	r3, #0
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006d0:	4619      	mov	r1, r3
 80006d2:	4833      	ldr	r0, [pc, #204]	; (80007a0 <MX_TIM1_Init+0x148>)
 80006d4:	f002 fb44 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80006de:	f000 f9b5 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e2:	2360      	movs	r3, #96	; 0x60
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ee:	2300      	movs	r3, #0
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000702:	2200      	movs	r2, #0
 8000704:	4619      	mov	r1, r3
 8000706:	4826      	ldr	r0, [pc, #152]	; (80007a0 <MX_TIM1_Init+0x148>)
 8000708:	f002 f868 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000712:	f000 f99b 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2204      	movs	r2, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4820      	ldr	r0, [pc, #128]	; (80007a0 <MX_TIM1_Init+0x148>)
 8000720:	f002 f85c 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800072a:	f000 f98f 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	2208      	movs	r2, #8
 8000734:	4619      	mov	r1, r3
 8000736:	481a      	ldr	r0, [pc, #104]	; (80007a0 <MX_TIM1_Init+0x148>)
 8000738:	f002 f850 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000742:	f000 f983 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	220c      	movs	r2, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4814      	ldr	r0, [pc, #80]	; (80007a0 <MX_TIM1_Init+0x148>)
 8000750:	f002 f844 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800075a:	f000 f977 	bl	8000a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	4807      	ldr	r0, [pc, #28]	; (80007a0 <MX_TIM1_Init+0x148>)
 8000782:	f002 fb45 	bl	8002e10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800078c:	f000 f95e 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <MX_TIM1_Init+0x148>)
 8000792:	f000 fa27 	bl	8000be4 <HAL_TIM_MspPostInit>

}
 8000796:	bf00      	nop
 8000798:	3748      	adds	r7, #72	; 0x48
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000ac 	.word	0x200000ac
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MX_TIM2_Init+0xf0>)
 80007cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80007d2:	4b31      	ldr	r3, [pc, #196]	; (8000898 <MX_TIM2_Init+0xf0>)
 80007d4:	2263      	movs	r2, #99	; 0x63
 80007d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <MX_TIM2_Init+0xf0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6400-1;
 80007de:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_TIM2_Init+0xf0>)
 80007e0:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80007e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_TIM2_Init+0xf0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_TIM2_Init+0xf0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f2:	4829      	ldr	r0, [pc, #164]	; (8000898 <MX_TIM2_Init+0xf0>)
 80007f4:	f001 fec0 	bl	8002578 <HAL_TIM_PWM_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80007fe:	f000 f925 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	4619      	mov	r1, r3
 8000810:	4821      	ldr	r0, [pc, #132]	; (8000898 <MX_TIM2_Init+0xf0>)
 8000812:	f002 faa5 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800081c:	f000 f916 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000820:	2360      	movs	r3, #96	; 0x60
 8000822:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	4619      	mov	r1, r3
 8000836:	4818      	ldr	r0, [pc, #96]	; (8000898 <MX_TIM2_Init+0xf0>)
 8000838:	f001 ffd0 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000842:	f000 f903 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2204      	movs	r2, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_TIM2_Init+0xf0>)
 800084e:	f001 ffc5 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000858:	f000 f8f8 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2208      	movs	r2, #8
 8000860:	4619      	mov	r1, r3
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_TIM2_Init+0xf0>)
 8000864:	f001 ffba 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800086e:	f000 f8ed 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	220c      	movs	r2, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <MX_TIM2_Init+0xf0>)
 800087a:	f001 ffaf 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000884:	f000 f8e2 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <MX_TIM2_Init+0xf0>)
 800088a:	f000 f9ab 	bl	8000be4 <HAL_TIM_MspPostInit>

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000f4 	.word	0x200000f4

0800089c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_TIM3_Init+0xd8>)
 80008c0:	4a2d      	ldr	r2, [pc, #180]	; (8000978 <MX_TIM3_Init+0xdc>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_TIM3_Init+0xd8>)
 80008c6:	2263      	movs	r2, #99	; 0x63
 80008c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_TIM3_Init+0xd8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6400-1;
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_TIM3_Init+0xd8>)
 80008d2:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80008d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_TIM3_Init+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_TIM3_Init+0xd8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008e4:	4823      	ldr	r0, [pc, #140]	; (8000974 <MX_TIM3_Init+0xd8>)
 80008e6:	f001 fe47 	bl	8002578 <HAL_TIM_PWM_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80008f0:	f000 f8ac 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4619      	mov	r1, r3
 8000902:	481c      	ldr	r0, [pc, #112]	; (8000974 <MX_TIM3_Init+0xd8>)
 8000904:	f002 fa2c 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800090e:	f000 f89d 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000912:	2360      	movs	r3, #96	; 0x60
 8000914:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	4812      	ldr	r0, [pc, #72]	; (8000974 <MX_TIM3_Init+0xd8>)
 800092a:	f001 ff57 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000934:	f000 f88a 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2204      	movs	r2, #4
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_TIM3_Init+0xd8>)
 8000940:	f001 ff4c 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800094a:	f000 f87f 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2208      	movs	r2, #8
 8000952:	4619      	mov	r1, r3
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM3_Init+0xd8>)
 8000956:	f001 ff41 	bl	80027dc <HAL_TIM_PWM_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000960:	f000 f874 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM3_Init+0xd8>)
 8000966:	f000 f93d 	bl	8000be4 <HAL_TIM_MspPostInit>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000013c 	.word	0x2000013c
 8000978:	40000400 	.word	0x40000400

0800097c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_USART1_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART1_UART_Init+0x4c>)
 80009b4:	f002 fa7d 	bl	8002eb2 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 f845 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000184 	.word	0x20000184
 80009cc:	40013800 	.word	0x40013800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_GPIO_Init+0x74>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <MX_GPIO_Init+0x74>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_GPIO_Init+0x74>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_GPIO_Init+0x74>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <MX_GPIO_Init+0x74>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_GPIO_Init+0x74>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE1_GPIO_Port, RE_DE1_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2120      	movs	r1, #32
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <MX_GPIO_Init+0x78>)
 8000a1a:	f001 f837 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RE_DE1_Pin */
  GPIO_InitStruct.Pin = RE_DE1_Pin;
 8000a1e:	2320      	movs	r3, #32
 8000a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RE_DE1_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	4619      	mov	r1, r3
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_GPIO_Init+0x78>)
 8000a36:	f000 fdf9 	bl	800162c <HAL_GPIO_Init>

}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010c00 	.word	0x40010c00

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x5c>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_MspInit+0x60>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <HAL_MspInit+0x60>)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <HAL_I2C_MspInit+0x90>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d132      	bne.n	8000b42 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0308 	and.w	r3, r3, #8
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afa:	2312      	movs	r3, #18
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4812      	ldr	r0, [pc, #72]	; (8000b54 <HAL_I2C_MspInit+0x98>)
 8000b0a:	f000 fd8f 	bl	800162c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_I2C_MspInit+0x9c>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <HAL_I2C_MspInit+0x9c>)
 8000b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b28:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_I2C_MspInit+0x94>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	40010000 	.word	0x40010000

08000b5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <HAL_TIM_PWM_MspInit+0x7c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d10c      	bne.n	8000b88 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_TIM_PWM_MspInit+0x80>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <HAL_TIM_PWM_MspInit+0x80>)
 8000b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_TIM_PWM_MspInit+0x80>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b86:	e022      	b.n	8000bce <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b90:	d10c      	bne.n	8000bac <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_TIM_PWM_MspInit+0x80>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <HAL_TIM_PWM_MspInit+0x80>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_TIM_PWM_MspInit+0x80>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
}
 8000baa:	e010      	b.n	8000bce <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_TIM_PWM_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10b      	bne.n	8000bce <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_TIM_PWM_MspInit+0x80>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_TIM_PWM_MspInit+0x80>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	61d3      	str	r3, [r2, #28]
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_TIM_PWM_MspInit+0x80>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
}
 8000bce:	bf00      	nop
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	40012c00 	.word	0x40012c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40000400 	.word	0x40000400

08000be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a3a      	ldr	r2, [pc, #232]	; (8000ce8 <HAL_TIM_MspPostInit+0x104>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d119      	bne.n	8000c38 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b39      	ldr	r3, [pc, #228]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a38      	ldr	r2, [pc, #224]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b36      	ldr	r3, [pc, #216]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697b      	ldr	r3, [r7, #20]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c1c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2302      	movs	r3, #2
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482f      	ldr	r0, [pc, #188]	; (8000cf0 <HAL_TIM_MspPostInit+0x10c>)
 8000c32:	f000 fcfb 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c36:	e052      	b.n	8000cde <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d118      	bne.n	8000c74 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	4a29      	ldr	r2, [pc, #164]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6193      	str	r3, [r2, #24]
 8000c4e:	4b27      	ldr	r3, [pc, #156]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2302      	movs	r3, #2
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0318 	add.w	r3, r7, #24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4820      	ldr	r0, [pc, #128]	; (8000cf0 <HAL_TIM_MspPostInit+0x10c>)
 8000c6e:	f000 fcdd 	bl	800162c <HAL_GPIO_Init>
}
 8000c72:	e034      	b.n	8000cde <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <HAL_TIM_MspPostInit+0x110>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12f      	bne.n	8000cde <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a1a      	ldr	r2, [pc, #104]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6193      	str	r3, [r2, #24]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_TIM_MspPostInit+0x108>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cae:	23c0      	movs	r3, #192	; 0xc0
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <HAL_TIM_MspPostInit+0x10c>)
 8000cc2:	f000 fcb3 	bl	800162c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 0318 	add.w	r3, r7, #24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <HAL_TIM_MspPostInit+0x114>)
 8000cda:	f000 fca7 	bl	800162c <HAL_GPIO_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40012c00 	.word	0x40012c00
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40010800 	.word	0x40010800
 8000cf4:	40000400 	.word	0x40000400
 8000cf8:	40010c00 	.word	0x40010c00

08000cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <HAL_UART_MspInit+0xb4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d145      	bne.n	8000da8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a24      	ldr	r2, [pc, #144]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a1e      	ldr	r2, [pc, #120]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <HAL_UART_MspInit+0xb8>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4816      	ldr	r0, [pc, #88]	; (8000db8 <HAL_UART_MspInit+0xbc>)
 8000d60:	f000 fc64 	bl	800162c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d64:	2380      	movs	r3, #128	; 0x80
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4810      	ldr	r0, [pc, #64]	; (8000db8 <HAL_UART_MspInit+0xbc>)
 8000d78:	f000 fc58 	bl	800162c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_UART_MspInit+0xc0>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_UART_MspInit+0xc0>)
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2025      	movs	r0, #37	; 0x25
 8000d9e:	f000 fb50 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000da2:	2025      	movs	r0, #37	; 0x25
 8000da4:	f000 fb69 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40013800 	.word	0x40013800
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	40010000 	.word	0x40010000

08000dc0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_UART_MspDeInit+0x34>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d10c      	bne.n	8000dec <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_UART_MspDeInit+0x38>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_UART_MspDeInit+0x38>)
 8000dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ddc:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8000dde:	21c0      	movs	r1, #192	; 0xc0
 8000de0:	4806      	ldr	r0, [pc, #24]	; (8000dfc <HAL_UART_MspDeInit+0x3c>)
 8000de2:	f000 fd9f 	bl	8001924 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000de6:	2025      	movs	r0, #37	; 0x25
 8000de8:	f000 fb55 	bl	8001496 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40013800 	.word	0x40013800
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler+0x4>

08000e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <HardFault_Handler+0x4>

08000e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <MemManage_Handler+0x4>

08000e12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr

08000e42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e46:	f000 f9e5 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <USART1_IRQHandler+0x10>)
 8000e56:	f002 f97b 	bl	8003150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000184 	.word	0x20000184

08000e64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <search_thruster_by_address>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

thruster_t thrusters[THRUSTERS_NUM];

int search_thruster_by_address(uint8_t address){
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
    for(int i = 0; i < THRUSTERS_NUM; i++){
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e00c      	b.n	8000e9a <search_thruster_by_address+0x2a>
        if(thrusters[i].address == address){
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <search_thruster_by_address+0x3c>)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	4413      	add	r3, r2
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d101      	bne.n	8000e94 <search_thruster_by_address+0x24>
            return i;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	e005      	b.n	8000ea0 <search_thruster_by_address+0x30>
    for(int i = 0; i < THRUSTERS_NUM; i++){
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2b05      	cmp	r3, #5
 8000e9e:	ddef      	ble.n	8000e80 <search_thruster_by_address+0x10>
        }
    }
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200001c8 	.word	0x200001c8

08000eb0 <set_thruster_velocity>:

void set_thruster_velocity(uint8_t address, int8_t velocity){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
    int thruster_num = search_thruster_by_address(address);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffd4 	bl	8000e70 <search_thruster_by_address>
 8000ec8:	60f8      	str	r0, [r7, #12]
    thrusters[thruster_num].velocity = velocity;
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <set_thruster_velocity+0x40>)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	4413      	add	r3, r2
 8000ed2:	330c      	adds	r3, #12
 8000ed4:	79ba      	ldrb	r2, [r7, #6]
 8000ed6:	701a      	strb	r2, [r3, #0]
    thrusters[thruster_num].need_update = true;
 8000ed8:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <set_thruster_velocity+0x40>)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	4413      	add	r3, r2
 8000ee0:	330d      	adds	r3, #13
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001c8 	.word	0x200001c8

08000ef4 <thrusters_update>:

void thrusters_update(){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
    for(int i = 0; i < THRUSTERS_NUM; i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e074      	b.n	8000fea <thrusters_update+0xf6>
        if(thrusters[i].need_update){
 8000f00:	4a3e      	ldr	r2, [pc, #248]	; (8000ffc <thrusters_update+0x108>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	4413      	add	r3, r2
 8000f08:	330d      	adds	r3, #13
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d069      	beq.n	8000fe4 <thrusters_update+0xf0>
            __HAL_TIM_SET_COMPARE(thrusters[i].htim, thrusters[i].chanel, THRUSTER_PWM_NEUTRAL+thrusters[i].velocity);
 8000f10:	4a3a      	ldr	r2, [pc, #232]	; (8000ffc <thrusters_update+0x108>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	011b      	lsls	r3, r3, #4
 8000f16:	4413      	add	r3, r2
 8000f18:	3308      	adds	r3, #8
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d112      	bne.n	8000f46 <thrusters_update+0x52>
 8000f20:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <thrusters_update+0x108>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	4413      	add	r3, r2
 8000f28:	330c      	adds	r3, #12
 8000f2a:	f993 3000 	ldrsb.w	r3, [r3]
 8000f2e:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
 8000f32:	4a32      	ldr	r2, [pc, #200]	; (8000ffc <thrusters_update+0x108>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	4413      	add	r3, r2
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	460a      	mov	r2, r1
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
 8000f44:	e047      	b.n	8000fd6 <thrusters_update+0xe2>
 8000f46:	4a2d      	ldr	r2, [pc, #180]	; (8000ffc <thrusters_update+0x108>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3308      	adds	r3, #8
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d112      	bne.n	8000f7c <thrusters_update+0x88>
 8000f56:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <thrusters_update+0x108>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	4413      	add	r3, r2
 8000f5e:	330c      	adds	r3, #12
 8000f60:	f993 3000 	ldrsb.w	r3, [r3]
 8000f64:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
 8000f68:	4a24      	ldr	r2, [pc, #144]	; (8000ffc <thrusters_update+0x108>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	4413      	add	r3, r2
 8000f70:	3304      	adds	r3, #4
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	460b      	mov	r3, r1
 8000f78:	6393      	str	r3, [r2, #56]	; 0x38
 8000f7a:	e02c      	b.n	8000fd6 <thrusters_update+0xe2>
 8000f7c:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <thrusters_update+0x108>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	4413      	add	r3, r2
 8000f84:	3308      	adds	r3, #8
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d112      	bne.n	8000fb2 <thrusters_update+0xbe>
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <thrusters_update+0x108>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	011b      	lsls	r3, r3, #4
 8000f92:	4413      	add	r3, r2
 8000f94:	330c      	adds	r3, #12
 8000f96:	f993 3000 	ldrsb.w	r3, [r3]
 8000f9a:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
 8000f9e:	4a17      	ldr	r2, [pc, #92]	; (8000ffc <thrusters_update+0x108>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	460b      	mov	r3, r1
 8000fae:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000fb0:	e011      	b.n	8000fd6 <thrusters_update+0xe2>
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <thrusters_update+0x108>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4413      	add	r3, r2
 8000fba:	330c      	adds	r3, #12
 8000fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8000fc0:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <thrusters_update+0x108>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	4413      	add	r3, r2
 8000fcc:	3304      	adds	r3, #4
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
            thrusters[i].need_update = false;
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <thrusters_update+0x108>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	4413      	add	r3, r2
 8000fde:	330d      	adds	r3, #13
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < THRUSTERS_NUM; i++){
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	dd87      	ble.n	8000f00 <thrusters_update+0xc>
        }
    }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	200001c8 	.word	0x200001c8

08001000 <init_thrusters_data>:

void init_thrusters_data(){
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
    thrusters[0].address = 0;
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <init_thrusters_data+0xd8>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
    thrusters[0].velocity = 0;
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <init_thrusters_data+0xd8>)
 800100c:	2200      	movs	r2, #0
 800100e:	731a      	strb	r2, [r3, #12]
    thrusters[0].htim = &htim1;
 8001010:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <init_thrusters_data+0xd8>)
 8001012:	4a32      	ldr	r2, [pc, #200]	; (80010dc <init_thrusters_data+0xdc>)
 8001014:	605a      	str	r2, [r3, #4]
    thrusters[0].chanel = TIM_CHANNEL_2;
 8001016:	4b30      	ldr	r3, [pc, #192]	; (80010d8 <init_thrusters_data+0xd8>)
 8001018:	2204      	movs	r2, #4
 800101a:	609a      	str	r2, [r3, #8]
    thrusters[0].need_update = true;
 800101c:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <init_thrusters_data+0xd8>)
 800101e:	2201      	movs	r2, #1
 8001020:	735a      	strb	r2, [r3, #13]

    thrusters[1].address = 1;
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <init_thrusters_data+0xd8>)
 8001024:	2201      	movs	r2, #1
 8001026:	741a      	strb	r2, [r3, #16]
    thrusters[1].velocity = 0;
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <init_thrusters_data+0xd8>)
 800102a:	2200      	movs	r2, #0
 800102c:	771a      	strb	r2, [r3, #28]
    thrusters[1].htim = &htim1;
 800102e:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <init_thrusters_data+0xd8>)
 8001030:	4a2a      	ldr	r2, [pc, #168]	; (80010dc <init_thrusters_data+0xdc>)
 8001032:	615a      	str	r2, [r3, #20]
    thrusters[1].chanel = TIM_CHANNEL_3;
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <init_thrusters_data+0xd8>)
 8001036:	2208      	movs	r2, #8
 8001038:	619a      	str	r2, [r3, #24]
    thrusters[1].need_update = true;
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <init_thrusters_data+0xd8>)
 800103c:	2201      	movs	r2, #1
 800103e:	775a      	strb	r2, [r3, #29]

    thrusters[2].address = 2;
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <init_thrusters_data+0xd8>)
 8001042:	2202      	movs	r2, #2
 8001044:	f883 2020 	strb.w	r2, [r3, #32]
    thrusters[2].velocity = 0;
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <init_thrusters_data+0xd8>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    thrusters[2].htim = &htim1;
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <init_thrusters_data+0xd8>)
 8001052:	4a22      	ldr	r2, [pc, #136]	; (80010dc <init_thrusters_data+0xdc>)
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
    thrusters[2].chanel = TIM_CHANNEL_4;
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <init_thrusters_data+0xd8>)
 8001058:	220c      	movs	r2, #12
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
    thrusters[2].need_update = true;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <init_thrusters_data+0xd8>)
 800105e:	2201      	movs	r2, #1
 8001060:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    thrusters[3].address = 3;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <init_thrusters_data+0xd8>)
 8001066:	2203      	movs	r2, #3
 8001068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    thrusters[3].velocity = 0;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <init_thrusters_data+0xd8>)
 800106e:	2200      	movs	r2, #0
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    thrusters[3].htim = &htim2;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <init_thrusters_data+0xd8>)
 8001076:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <init_thrusters_data+0xe0>)
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
    thrusters[3].chanel = TIM_CHANNEL_1;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <init_thrusters_data+0xd8>)
 800107c:	2200      	movs	r2, #0
 800107e:	639a      	str	r2, [r3, #56]	; 0x38
    thrusters[3].need_update = true;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <init_thrusters_data+0xd8>)
 8001082:	2201      	movs	r2, #1
 8001084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    thrusters[4].address = 4;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <init_thrusters_data+0xd8>)
 800108a:	2204      	movs	r2, #4
 800108c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    thrusters[4].velocity = 0;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <init_thrusters_data+0xd8>)
 8001092:	2200      	movs	r2, #0
 8001094:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    thrusters[4].htim = &htim2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <init_thrusters_data+0xd8>)
 800109a:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <init_thrusters_data+0xe0>)
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
    thrusters[4].chanel = TIM_CHANNEL_2;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <init_thrusters_data+0xd8>)
 80010a0:	2204      	movs	r2, #4
 80010a2:	649a      	str	r2, [r3, #72]	; 0x48
    thrusters[4].need_update = true;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <init_thrusters_data+0xd8>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    thrusters[5].address = 5;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <init_thrusters_data+0xd8>)
 80010ae:	2205      	movs	r2, #5
 80010b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    thrusters[5].velocity = 0;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <init_thrusters_data+0xd8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    thrusters[5].htim = &htim2;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <init_thrusters_data+0xd8>)
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <init_thrusters_data+0xe0>)
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
    thrusters[5].chanel = TIM_CHANNEL_3;
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <init_thrusters_data+0xd8>)
 80010c4:	2208      	movs	r2, #8
 80010c6:	659a      	str	r2, [r3, #88]	; 0x58
    thrusters[5].need_update = true;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <init_thrusters_data+0xd8>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
};
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	200001c8 	.word	0x200001c8
 80010dc:	200000ac 	.word	0x200000ac
 80010e0:	200000f4 	.word	0x200000f4

080010e4 <init_thrusters>:

void init_thrusters(){
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    init_thrusters_data();
 80010e8:	f7ff ff8a 	bl	8001000 <init_thrusters_data>
    thrusters_update();
 80010ec:	f7ff ff02 	bl	8000ef4 <thrusters_update>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80010f0:	2100      	movs	r1, #0
 80010f2:	4810      	ldr	r0, [pc, #64]	; (8001134 <init_thrusters+0x50>)
 80010f4:	f001 fa90 	bl	8002618 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 80010f8:	2104      	movs	r1, #4
 80010fa:	480e      	ldr	r0, [pc, #56]	; (8001134 <init_thrusters+0x50>)
 80010fc:	f001 fa8c 	bl	8002618 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3);
 8001100:	2108      	movs	r1, #8
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <init_thrusters+0x50>)
 8001104:	f001 fa88 	bl	8002618 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4);
 8001108:	210c      	movs	r1, #12
 800110a:	480a      	ldr	r0, [pc, #40]	; (8001134 <init_thrusters+0x50>)
 800110c:	f001 fa84 	bl	8002618 <HAL_TIM_PWM_Start_IT>

    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8001110:	2100      	movs	r1, #0
 8001112:	4809      	ldr	r0, [pc, #36]	; (8001138 <init_thrusters+0x54>)
 8001114:	f001 fa80 	bl	8002618 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8001118:	2104      	movs	r1, #4
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <init_thrusters+0x54>)
 800111c:	f001 fa7c 	bl	8002618 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001120:	2108      	movs	r1, #8
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <init_thrusters+0x54>)
 8001124:	f001 fa78 	bl	8002618 <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8001128:	210c      	movs	r1, #12
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <init_thrusters+0x54>)
 800112c:	f001 fa74 	bl	8002618 <HAL_TIM_PWM_Start_IT>

//    HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
//    HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
//    HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000ac 	.word	0x200000ac
 8001138:	200000f4 	.word	0x200000f4

0800113c <Reset_Handler>:
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <LoopFillZerobss+0x12>)
 800113e:	490d      	ldr	r1, [pc, #52]	; (8001174 <LoopFillZerobss+0x16>)
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopFillZerobss+0x1a>)
 8001142:	2300      	movs	r3, #0
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:
 8001146:	58d4      	ldr	r4, [r2, r3]
 8001148:	50c4      	str	r4, [r0, r3]
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:
 800114c:	18c4      	adds	r4, r0, r3
 800114e:	428c      	cmp	r4, r1
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LoopFillZerobss+0x1e>)
 8001154:	4c0a      	ldr	r4, [pc, #40]	; (8001180 <LoopFillZerobss+0x22>)
 8001156:	2300      	movs	r3, #0
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:
 800115a:	6013      	str	r3, [r2, #0]
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:
 800115e:	42a2      	cmp	r2, r4
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>
 8001162:	f7ff fe7f 	bl	8000e64 <SystemInit>
 8001166:	f002 fc1b 	bl	80039a0 <__libc_init_array>
 800116a:	f7ff f9ef 	bl	800054c <main>
 800116e:	4770      	bx	lr
 8001170:	20000000 	.word	0x20000000
 8001174:	2000000c 	.word	0x2000000c
 8001178:	08003a30 	.word	0x08003a30
 800117c:	2000000c 	.word	0x2000000c
 8001180:	2000022c 	.word	0x2000022c

08001184 <ADC1_2_IRQHandler>:
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_Init+0x28>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_Init+0x28>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 f947 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119e:	200f      	movs	r0, #15
 80011a0:	f000 f808 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a4:	f7ff fc58 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f96d 	bl	80014b2 <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f927 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000000 	.word	0x20000000
 800120c:	20000008 	.word	0x20000008
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x1c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x20>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a03      	ldr	r2, [pc, #12]	; (8001234 <HAL_IncTick+0x20>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	20000008 	.word	0x20000008
 8001234:	20000228 	.word	0x20000228

08001238 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <HAL_GetTick+0x10>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	20000228 	.word	0x20000228

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4906      	ldr	r1, [pc, #24]	; (80012e4 <__NVIC_EnableIRQ+0x34>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db12      	blt.n	8001320 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	490a      	ldr	r1, [pc, #40]	; (800132c <__NVIC_DisableIRQ+0x44>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	3320      	adds	r3, #32
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001314:	f3bf 8f4f 	dsb	sy
}
 8001318:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800131a:	f3bf 8f6f 	isb	sy
}
 800131e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f7ff ff90 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff09 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff1e 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff90 	bl	8001384 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5f 	bl	8001330 <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff11 	bl	80012b0 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff1f 	bl	80012e8 <__NVIC_DisableIRQ>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff94 	bl	80013e8 <SysTick_Config>
 80014c0:	4603      	mov	r3, r0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d008      	beq.n	80014f2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2204      	movs	r2, #4
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e020      	b.n	8001534 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 020e 	bic.w	r2, r2, #14
 8001500:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151a:	2101      	movs	r1, #1
 800151c:	fa01 f202 	lsl.w	r2, r1, r2
 8001520:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
	...

08001540 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001552:	2b02      	cmp	r3, #2
 8001554:	d005      	beq.n	8001562 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2204      	movs	r2, #4
 800155a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e051      	b.n	8001606 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 020e 	bic.w	r2, r2, #14
 8001570:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0201 	bic.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a22      	ldr	r2, [pc, #136]	; (8001610 <HAL_DMA_Abort_IT+0xd0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d029      	beq.n	80015e0 <HAL_DMA_Abort_IT+0xa0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_DMA_Abort_IT+0xd4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d022      	beq.n	80015dc <HAL_DMA_Abort_IT+0x9c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <HAL_DMA_Abort_IT+0xd8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d01a      	beq.n	80015d6 <HAL_DMA_Abort_IT+0x96>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1d      	ldr	r2, [pc, #116]	; (800161c <HAL_DMA_Abort_IT+0xdc>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d012      	beq.n	80015d0 <HAL_DMA_Abort_IT+0x90>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <HAL_DMA_Abort_IT+0xe0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d00a      	beq.n	80015ca <HAL_DMA_Abort_IT+0x8a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <HAL_DMA_Abort_IT+0xe4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d102      	bne.n	80015c4 <HAL_DMA_Abort_IT+0x84>
 80015be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015c2:	e00e      	b.n	80015e2 <HAL_DMA_Abort_IT+0xa2>
 80015c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c8:	e00b      	b.n	80015e2 <HAL_DMA_Abort_IT+0xa2>
 80015ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ce:	e008      	b.n	80015e2 <HAL_DMA_Abort_IT+0xa2>
 80015d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d4:	e005      	b.n	80015e2 <HAL_DMA_Abort_IT+0xa2>
 80015d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015da:	e002      	b.n	80015e2 <HAL_DMA_Abort_IT+0xa2>
 80015dc:	2310      	movs	r3, #16
 80015de:	e000      	b.n	80015e2 <HAL_DMA_Abort_IT+0xa2>
 80015e0:	2301      	movs	r3, #1
 80015e2:	4a11      	ldr	r2, [pc, #68]	; (8001628 <HAL_DMA_Abort_IT+0xe8>)
 80015e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
    } 
  }
  return status;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020008 	.word	0x40020008
 8001614:	4002001c 	.word	0x4002001c
 8001618:	40020030 	.word	0x40020030
 800161c:	40020044 	.word	0x40020044
 8001620:	40020058 	.word	0x40020058
 8001624:	4002006c 	.word	0x4002006c
 8001628:	40020000 	.word	0x40020000

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b08b      	sub	sp, #44	; 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e161      	b.n	8001904 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001640:	2201      	movs	r2, #1
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8150 	bne.w	80018fe <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a97      	ldr	r2, [pc, #604]	; (80018c0 <HAL_GPIO_Init+0x294>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d05e      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001668:	4a95      	ldr	r2, [pc, #596]	; (80018c0 <HAL_GPIO_Init+0x294>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d875      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800166e:	4a95      	ldr	r2, [pc, #596]	; (80018c4 <HAL_GPIO_Init+0x298>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d058      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001674:	4a93      	ldr	r2, [pc, #588]	; (80018c4 <HAL_GPIO_Init+0x298>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d86f      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800167a:	4a93      	ldr	r2, [pc, #588]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d052      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001680:	4a91      	ldr	r2, [pc, #580]	; (80018c8 <HAL_GPIO_Init+0x29c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d869      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001686:	4a91      	ldr	r2, [pc, #580]	; (80018cc <HAL_GPIO_Init+0x2a0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d04c      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 800168c:	4a8f      	ldr	r2, [pc, #572]	; (80018cc <HAL_GPIO_Init+0x2a0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d863      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001692:	4a8f      	ldr	r2, [pc, #572]	; (80018d0 <HAL_GPIO_Init+0x2a4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d046      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001698:	4a8d      	ldr	r2, [pc, #564]	; (80018d0 <HAL_GPIO_Init+0x2a4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d85d      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d82a      	bhi.n	80016f8 <HAL_GPIO_Init+0xcc>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d859      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 80016a6:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <HAL_GPIO_Init+0x80>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001701 	.word	0x08001701
 80016b4:	08001713 	.word	0x08001713
 80016b8:	08001755 	.word	0x08001755
 80016bc:	0800175b 	.word	0x0800175b
 80016c0:	0800175b 	.word	0x0800175b
 80016c4:	0800175b 	.word	0x0800175b
 80016c8:	0800175b 	.word	0x0800175b
 80016cc:	0800175b 	.word	0x0800175b
 80016d0:	0800175b 	.word	0x0800175b
 80016d4:	0800175b 	.word	0x0800175b
 80016d8:	0800175b 	.word	0x0800175b
 80016dc:	0800175b 	.word	0x0800175b
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	0800175b 	.word	0x0800175b
 80016e8:	0800175b 	.word	0x0800175b
 80016ec:	0800175b 	.word	0x0800175b
 80016f0:	08001709 	.word	0x08001709
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	4a76      	ldr	r2, [pc, #472]	; (80018d4 <HAL_GPIO_Init+0x2a8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e02c      	b.n	800175a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e029      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	3304      	adds	r3, #4
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e024      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	3308      	adds	r3, #8
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e01f      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	330c      	adds	r3, #12
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e01a      	b.n	800175c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172e:	2304      	movs	r3, #4
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e013      	b.n	800175c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	611a      	str	r2, [r3, #16]
          break;
 8001746:	e009      	b.n	800175c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001748:	2308      	movs	r3, #8
 800174a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	615a      	str	r2, [r3, #20]
          break;
 8001752:	e003      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x130>
          break;
 800175a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2bff      	cmp	r3, #255	; 0xff
 8001760:	d801      	bhi.n	8001766 <HAL_GPIO_Init+0x13a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	e001      	b.n	800176a <HAL_GPIO_Init+0x13e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d802      	bhi.n	8001778 <HAL_GPIO_Init+0x14c>
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x152>
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	3b08      	subs	r3, #8
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	210f      	movs	r1, #15
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 80a9 	beq.w	80018fe <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_GPIO_Init+0x2ac>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a49      	ldr	r2, [pc, #292]	; (80018d8 <HAL_GPIO_Init+0x2ac>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b47      	ldr	r3, [pc, #284]	; (80018d8 <HAL_GPIO_Init+0x2ac>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c4:	4a45      	ldr	r2, [pc, #276]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a3d      	ldr	r2, [pc, #244]	; (80018e0 <HAL_GPIO_Init+0x2b4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00d      	beq.n	800180c <HAL_GPIO_Init+0x1e0>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a3c      	ldr	r2, [pc, #240]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d007      	beq.n	8001808 <HAL_GPIO_Init+0x1dc>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a3b      	ldr	r2, [pc, #236]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_GPIO_Init+0x1d8>
 8001800:	2302      	movs	r3, #2
 8001802:	e004      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 8001804:	2303      	movs	r3, #3
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 800180c:	2300      	movs	r3, #0
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	f002 0203 	and.w	r2, r2, #3
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	4093      	lsls	r3, r2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800181e:	492f      	ldr	r1, [pc, #188]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001838:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	492b      	ldr	r1, [pc, #172]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001846:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4927      	ldr	r1, [pc, #156]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 8001850:	4013      	ands	r3, r2
 8001852:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4921      	ldr	r1, [pc, #132]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	491d      	ldr	r1, [pc, #116]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 8001878:	4013      	ands	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	4917      	ldr	r1, [pc, #92]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4913      	ldr	r1, [pc, #76]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01f      	beq.n	80018f0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	490d      	ldr	r1, [pc, #52]	; (80018ec <HAL_GPIO_Init+0x2c0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60cb      	str	r3, [r1, #12]
 80018bc:	e01f      	b.n	80018fe <HAL_GPIO_Init+0x2d2>
 80018be:	bf00      	nop
 80018c0:	10320000 	.word	0x10320000
 80018c4:	10310000 	.word	0x10310000
 80018c8:	10220000 	.word	0x10220000
 80018cc:	10210000 	.word	0x10210000
 80018d0:	10120000 	.word	0x10120000
 80018d4:	10110000 	.word	0x10110000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	40011000 	.word	0x40011000
 80018ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_GPIO_Init+0x2f4>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	4909      	ldr	r1, [pc, #36]	; (8001920 <HAL_GPIO_Init+0x2f4>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	3301      	adds	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	fa22 f303 	lsr.w	r3, r2, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	f47f ae96 	bne.w	8001640 <HAL_GPIO_Init+0x14>
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	372c      	adds	r7, #44	; 0x2c
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	40010400 	.word	0x40010400

08001924 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001932:	e094      	b.n	8001a5e <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 8087 	beq.w	8001a58 <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800194a:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <HAL_GPIO_DeInit+0x154>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4013      	ands	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a43      	ldr	r2, [pc, #268]	; (8001a7c <HAL_GPIO_DeInit+0x158>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_DeInit+0x6c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a42      	ldr	r2, [pc, #264]	; (8001a80 <HAL_GPIO_DeInit+0x15c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_DeInit+0x68>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a41      	ldr	r2, [pc, #260]	; (8001a84 <HAL_GPIO_DeInit+0x160>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_DeInit+0x64>
 8001984:	2302      	movs	r3, #2
 8001986:	e004      	b.n	8001992 <HAL_GPIO_DeInit+0x6e>
 8001988:	2303      	movs	r3, #3
 800198a:	e002      	b.n	8001992 <HAL_GPIO_DeInit+0x6e>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_GPIO_DeInit+0x6e>
 8001990:	2300      	movs	r3, #0
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	f002 0203 	and.w	r2, r2, #3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4093      	lsls	r3, r2
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d132      	bne.n	8001a08 <HAL_GPIO_DeInit+0xe4>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80019b2:	4a31      	ldr	r2, [pc, #196]	; (8001a78 <HAL_GPIO_DeInit+0x154>)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	43da      	mvns	r2, r3
 80019c2:	482d      	ldr	r0, [pc, #180]	; (8001a78 <HAL_GPIO_DeInit+0x154>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	400a      	ands	r2, r1
 80019ca:	3302      	adds	r3, #2
 80019cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_GPIO_DeInit+0x164>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	492b      	ldr	r1, [pc, #172]	; (8001a88 <HAL_GPIO_DeInit+0x164>)
 80019da:	4013      	ands	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <HAL_GPIO_DeInit+0x164>)
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4928      	ldr	r1, [pc, #160]	; (8001a88 <HAL_GPIO_DeInit+0x164>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <HAL_GPIO_DeInit+0x164>)
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	4924      	ldr	r1, [pc, #144]	; (8001a88 <HAL_GPIO_DeInit+0x164>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_GPIO_DeInit+0x164>)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4921      	ldr	r1, [pc, #132]	; (8001a88 <HAL_GPIO_DeInit+0x164>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d801      	bhi.n	8001a12 <HAL_GPIO_DeInit+0xee>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	e001      	b.n	8001a16 <HAL_GPIO_DeInit+0xf2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3304      	adds	r3, #4
 8001a16:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2bff      	cmp	r3, #255	; 0xff
 8001a1c:	d802      	bhi.n	8001a24 <HAL_GPIO_DeInit+0x100>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_DeInit+0x106>
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	3b08      	subs	r3, #8
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	210f      	movs	r1, #15
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	431a      	orrs	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f47f af64 	bne.w	8001934 <HAL_GPIO_DeInit+0x10>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e12b      	b.n	8001d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe ffea 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2224      	movs	r2, #36	; 0x24
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b20:	f000 fce4 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 8001b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4a81      	ldr	r2, [pc, #516]	; (8001d30 <HAL_I2C_Init+0x274>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d807      	bhi.n	8001b40 <HAL_I2C_Init+0x84>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a80      	ldr	r2, [pc, #512]	; (8001d34 <HAL_I2C_Init+0x278>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	bf94      	ite	ls
 8001b38:	2301      	movls	r3, #1
 8001b3a:	2300      	movhi	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	e006      	b.n	8001b4e <HAL_I2C_Init+0x92>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4a7d      	ldr	r2, [pc, #500]	; (8001d38 <HAL_I2C_Init+0x27c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	bf94      	ite	ls
 8001b48:	2301      	movls	r3, #1
 8001b4a:	2300      	movhi	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0e7      	b.n	8001d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4a78      	ldr	r2, [pc, #480]	; (8001d3c <HAL_I2C_Init+0x280>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a6a      	ldr	r2, [pc, #424]	; (8001d30 <HAL_I2C_Init+0x274>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d802      	bhi.n	8001b90 <HAL_I2C_Init+0xd4>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	e009      	b.n	8001ba4 <HAL_I2C_Init+0xe8>
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	4a69      	ldr	r2, [pc, #420]	; (8001d40 <HAL_I2C_Init+0x284>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	495c      	ldr	r1, [pc, #368]	; (8001d30 <HAL_I2C_Init+0x274>)
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	d819      	bhi.n	8001bf8 <HAL_I2C_Init+0x13c>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e59      	subs	r1, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd2:	1c59      	adds	r1, r3, #1
 8001bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bd8:	400b      	ands	r3, r1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00a      	beq.n	8001bf4 <HAL_I2C_Init+0x138>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1e59      	subs	r1, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf2:	e051      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	e04f      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d111      	bne.n	8001c24 <HAL_I2C_Init+0x168>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	1e58      	subs	r0, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	e012      	b.n	8001c4a <HAL_I2C_Init+0x18e>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e58      	subs	r0, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	0099      	lsls	r1, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Init+0x196>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e022      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10e      	bne.n	8001c78 <HAL_I2C_Init+0x1bc>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1e58      	subs	r0, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c76:	e00f      	b.n	8001c98 <HAL_I2C_Init+0x1dc>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1e58      	subs	r0, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	0099      	lsls	r1, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	6809      	ldr	r1, [r1, #0]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6911      	ldr	r1, [r2, #16]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68d2      	ldr	r2, [r2, #12]
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	000186a0 	.word	0x000186a0
 8001d34:	001e847f 	.word	0x001e847f
 8001d38:	003d08ff 	.word	0x003d08ff
 8001d3c:	431bde83 	.word	0x431bde83
 8001d40:	10624dd3 	.word	0x10624dd3

08001d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e272      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8087 	beq.w	8001e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d64:	4b92      	ldr	r3, [pc, #584]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d00c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d70:	4b8f      	ldr	r3, [pc, #572]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d112      	bne.n	8001da2 <HAL_RCC_OscConfig+0x5e>
 8001d7c:	4b8c      	ldr	r3, [pc, #560]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d10b      	bne.n	8001da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8a:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d06c      	beq.n	8001e70 <HAL_RCC_OscConfig+0x12c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d168      	bne.n	8001e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e24c      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x76>
 8001dac:	4b80      	ldr	r3, [pc, #512]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a7f      	ldr	r2, [pc, #508]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e02e      	b.n	8001e18 <HAL_RCC_OscConfig+0xd4>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x98>
 8001dc2:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a7a      	ldr	r2, [pc, #488]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b78      	ldr	r3, [pc, #480]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a77      	ldr	r2, [pc, #476]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e01d      	b.n	8001e18 <HAL_RCC_OscConfig+0xd4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0xbc>
 8001de6:	4b72      	ldr	r3, [pc, #456]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a71      	ldr	r2, [pc, #452]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a6e      	ldr	r2, [pc, #440]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0xd4>
 8001e00:	4b6b      	ldr	r3, [pc, #428]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a6a      	ldr	r2, [pc, #424]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a67      	ldr	r2, [pc, #412]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7ff fa0a 	bl	8001238 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e28:	f7ff fa06 	bl	8001238 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b64      	cmp	r3, #100	; 0x64
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e200      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0xe4>
 8001e46:	e014      	b.n	8001e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e48:	f7ff f9f6 	bl	8001238 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7ff f9f2 	bl	8001238 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e1ec      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x10c>
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d063      	beq.n	8001f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d11c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x18c>
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d116      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d005      	beq.n	8001eba <HAL_RCC_OscConfig+0x176>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e1c0      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eba:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4939      	ldr	r1, [pc, #228]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	e03a      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed8:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff f9ab 	bl	8001238 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f9a7 	bl	8001238 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1a1      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4927      	ldr	r1, [pc, #156]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	e015      	b.n	8001f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff f98a 	bl	8001238 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7ff f986 	bl	8001238 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e180      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d03a      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d019      	beq.n	8001f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f60:	f7ff f96a 	bl	8001238 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f68:	f7ff f966 	bl	8001238 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e160      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f000 fad8 	bl	800253c <RCC_Delay>
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_OscConfig+0x274>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7ff f950 	bl	8001238 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9a:	e00f      	b.n	8001fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff f94c 	bl	8001238 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e146      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	42420000 	.word	0x42420000
 8001fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbc:	4b92      	ldr	r3, [pc, #584]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1e9      	bne.n	8001f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80a6 	beq.w	8002122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10d      	bne.n	8002002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b88      	ldr	r3, [pc, #544]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a87      	ldr	r2, [pc, #540]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	61d3      	str	r3, [r2, #28]
 8001ff2:	4b85      	ldr	r3, [pc, #532]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffe:	2301      	movs	r3, #1
 8002000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002002:	4b82      	ldr	r3, [pc, #520]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d118      	bne.n	8002040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200e:	4b7f      	ldr	r3, [pc, #508]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7e      	ldr	r2, [pc, #504]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201a:	f7ff f90d 	bl	8001238 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002022:	f7ff f909 	bl	8001238 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b64      	cmp	r3, #100	; 0x64
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e103      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002034:	4b75      	ldr	r3, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x4c8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x312>
 8002048:	4b6f      	ldr	r3, [pc, #444]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a6e      	ldr	r2, [pc, #440]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	e02d      	b.n	80020b2 <HAL_RCC_OscConfig+0x36e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x334>
 800205e:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a69      	ldr	r2, [pc, #420]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6213      	str	r3, [r2, #32]
 800206a:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	4a66      	ldr	r2, [pc, #408]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	6213      	str	r3, [r2, #32]
 8002076:	e01c      	b.n	80020b2 <HAL_RCC_OscConfig+0x36e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d10c      	bne.n	800209a <HAL_RCC_OscConfig+0x356>
 8002080:	4b61      	ldr	r3, [pc, #388]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a60      	ldr	r2, [pc, #384]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	4b5e      	ldr	r3, [pc, #376]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	e00b      	b.n	80020b2 <HAL_RCC_OscConfig+0x36e>
 800209a:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a5a      	ldr	r2, [pc, #360]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	6213      	str	r3, [r2, #32]
 80020a6:	4b58      	ldr	r3, [pc, #352]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a57      	ldr	r2, [pc, #348]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	f023 0304 	bic.w	r3, r3, #4
 80020b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d015      	beq.n	80020e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f8bd 	bl	8001238 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff f8b9 	bl	8001238 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0b1      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	4b4b      	ldr	r3, [pc, #300]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ee      	beq.n	80020c2 <HAL_RCC_OscConfig+0x37e>
 80020e4:	e014      	b.n	8002110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7ff f8a7 	bl	8001238 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7ff f8a3 	bl	8001238 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e09b      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002104:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ee      	bne.n	80020ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d105      	bne.n	8002122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002116:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a3b      	ldr	r2, [pc, #236]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8087 	beq.w	800223a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800212c:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d061      	beq.n	80021fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d146      	bne.n	80021ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b33      	ldr	r3, [pc, #204]	; (8002210 <HAL_RCC_OscConfig+0x4cc>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff f877 	bl	8001238 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214e:	f7ff f873 	bl	8001238 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e06d      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f0      	bne.n	800214e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002174:	d108      	bne.n	8002188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002176:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4921      	ldr	r1, [pc, #132]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002188:	4b1f      	ldr	r3, [pc, #124]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a19      	ldr	r1, [r3, #32]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	430b      	orrs	r3, r1
 800219a:	491b      	ldr	r1, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	4313      	orrs	r3, r2
 800219e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7ff f847 	bl	8001238 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7ff f843 	bl	8001238 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e03d      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x46a>
 80021cc:	e035      	b.n	800223a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_OscConfig+0x4cc>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff f830 	bl	8001238 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f82c 	bl	8001238 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e026      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x498>
 80021fa:	e01e      	b.n	800223a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d107      	bne.n	8002214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e019      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
 8002210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_OscConfig+0x500>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0d0      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b67      	ldr	r3, [pc, #412]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4965      	ldr	r1, [pc, #404]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b8      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022a4:	4b59      	ldr	r3, [pc, #356]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a58      	ldr	r2, [pc, #352]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4a52      	ldr	r2, [pc, #328]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c8:	4b50      	ldr	r3, [pc, #320]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	494d      	ldr	r1, [pc, #308]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d040      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b47      	ldr	r3, [pc, #284]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d115      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e07f      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e073      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06b      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4936      	ldr	r1, [pc, #216]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7fe ff7e 	bl	8001238 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7fe ff7a 	bl	8001238 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e053      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d210      	bcs.n	8002398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 0207 	bic.w	r2, r3, #7
 800237e:	4922      	ldr	r1, [pc, #136]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e032      	b.n	80023fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4916      	ldr	r1, [pc, #88]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	490e      	ldr	r1, [pc, #56]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023d6:	f000 f821 	bl	800241c <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	490a      	ldr	r1, [pc, #40]	; (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023e8:	5ccb      	ldrb	r3, [r1, r3]
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <HAL_RCC_ClockConfig+0x1cc>)
 80023f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <HAL_RCC_ClockConfig+0x1d0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fedc 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000
 800240c:	40021000 	.word	0x40021000
 8002410:	08003a10 	.word	0x08003a10
 8002414:	20000000 	.word	0x20000000
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800241c:	b490      	push	{r4, r7}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002424:	1d3c      	adds	r4, r7, #4
 8002426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800242c:	f240 2301 	movw	r3, #513	; 0x201
 8002430:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b04      	cmp	r3, #4
 8002454:	d002      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0x40>
 8002456:	2b08      	cmp	r3, #8
 8002458:	d003      	beq.n	8002462 <HAL_RCC_GetSysClockFreq+0x46>
 800245a:	e02b      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800245e:	623b      	str	r3, [r7, #32]
      break;
 8002460:	e02b      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	0c9b      	lsrs	r3, r3, #18
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3328      	adds	r3, #40	; 0x28
 800246c:	443b      	add	r3, r7
 800246e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002472:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0c5b      	lsrs	r3, r3, #17
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	3328      	adds	r3, #40	; 0x28
 800248a:	443b      	add	r3, r7
 800248c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002490:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002496:	fb03 f202 	mul.w	r2, r3, r2
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	e004      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	623b      	str	r3, [r7, #32]
      break;
 80024b2:	e002      	b.n	80024ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024b6:	623b      	str	r3, [r7, #32]
      break;
 80024b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ba:	6a3b      	ldr	r3, [r7, #32]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc90      	pop	{r4, r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	08003a00 	.word	0x08003a00
 80024cc:	40021000 	.word	0x40021000
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	003d0900 	.word	0x003d0900

080024d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	20000000 	.word	0x20000000

080024ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f0:	f7ff fff2 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4903      	ldr	r1, [pc, #12]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	08003a20 	.word	0x08003a20

08002514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002518:	f7ff ffde 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0adb      	lsrs	r3, r3, #11
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	4903      	ldr	r1, [pc, #12]	; (8002538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	08003a20 	.word	0x08003a20

0800253c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002544:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <RCC_Delay+0x34>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <RCC_Delay+0x38>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0a5b      	lsrs	r3, r3, #9
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002558:	bf00      	nop
  }
  while (Delay --);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1e5a      	subs	r2, r3, #1
 800255e:	60fa      	str	r2, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <RCC_Delay+0x1c>
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	20000000 	.word	0x20000000
 8002574:	10624dd3 	.word	0x10624dd3

08002578 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e041      	b.n	800260e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe fadc 	bl	8000b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f000 f9ce 	bl	8002958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d109      	bne.n	800263c <HAL_TIM_PWM_Start_IT+0x24>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	e022      	b.n	8002682 <HAL_TIM_PWM_Start_IT+0x6a>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d109      	bne.n	8002656 <HAL_TIM_PWM_Start_IT+0x3e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e015      	b.n	8002682 <HAL_TIM_PWM_Start_IT+0x6a>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d109      	bne.n	8002670 <HAL_TIM_PWM_Start_IT+0x58>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e008      	b.n	8002682 <HAL_TIM_PWM_Start_IT+0x6a>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e09f      	b.n	80027ca <HAL_TIM_PWM_Start_IT+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <HAL_TIM_PWM_Start_IT+0x82>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002698:	e013      	b.n	80026c2 <HAL_TIM_PWM_Start_IT+0xaa>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d104      	bne.n	80026aa <HAL_TIM_PWM_Start_IT+0x92>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a8:	e00b      	b.n	80026c2 <HAL_TIM_PWM_Start_IT+0xaa>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d104      	bne.n	80026ba <HAL_TIM_PWM_Start_IT+0xa2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026b8:	e003      	b.n	80026c2 <HAL_TIM_PWM_Start_IT+0xaa>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b0c      	cmp	r3, #12
 80026c6:	d841      	bhi.n	800274c <HAL_TIM_PWM_Start_IT+0x134>
 80026c8:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <HAL_TIM_PWM_Start_IT+0xb8>)
 80026ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ce:	bf00      	nop
 80026d0:	08002705 	.word	0x08002705
 80026d4:	0800274d 	.word	0x0800274d
 80026d8:	0800274d 	.word	0x0800274d
 80026dc:	0800274d 	.word	0x0800274d
 80026e0:	08002717 	.word	0x08002717
 80026e4:	0800274d 	.word	0x0800274d
 80026e8:	0800274d 	.word	0x0800274d
 80026ec:	0800274d 	.word	0x0800274d
 80026f0:	08002729 	.word	0x08002729
 80026f4:	0800274d 	.word	0x0800274d
 80026f8:	0800274d 	.word	0x0800274d
 80026fc:	0800274d 	.word	0x0800274d
 8002700:	0800273b 	.word	0x0800273b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0202 	orr.w	r2, r2, #2
 8002712:	60da      	str	r2, [r3, #12]
      break;
 8002714:	e01b      	b.n	800274e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0204 	orr.w	r2, r2, #4
 8002724:	60da      	str	r2, [r3, #12]
      break;
 8002726:	e012      	b.n	800274e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0208 	orr.w	r2, r2, #8
 8002736:	60da      	str	r2, [r3, #12]
      break;
 8002738:	e009      	b.n	800274e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0210 	orr.w	r2, r2, #16
 8002748:	60da      	str	r2, [r3, #12]
      break;
 800274a:	e000      	b.n	800274e <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 800274c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fade 	bl	8002d18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <HAL_TIM_PWM_Start_IT+0x1bc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d107      	bne.n	8002776 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <HAL_TIM_PWM_Start_IT+0x1bc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d009      	beq.n	8002794 <HAL_TIM_PWM_Start_IT+0x17c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002788:	d004      	beq.n	8002794 <HAL_TIM_PWM_Start_IT+0x17c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_TIM_PWM_Start_IT+0x1c0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d111      	bne.n	80027b8 <HAL_TIM_PWM_Start_IT+0x1a0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d010      	beq.n	80027c8 <HAL_TIM_PWM_Start_IT+0x1b0>
    {
      __HAL_TIM_ENABLE(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b6:	e007      	b.n	80027c8 <HAL_TIM_PWM_Start_IT+0x1b0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400

080027dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e0ac      	b.n	8002950 <HAL_TIM_PWM_ConfigChannel+0x174>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b0c      	cmp	r3, #12
 8002802:	f200 809f 	bhi.w	8002944 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	08002841 	.word	0x08002841
 8002810:	08002945 	.word	0x08002945
 8002814:	08002945 	.word	0x08002945
 8002818:	08002945 	.word	0x08002945
 800281c:	08002881 	.word	0x08002881
 8002820:	08002945 	.word	0x08002945
 8002824:	08002945 	.word	0x08002945
 8002828:	08002945 	.word	0x08002945
 800282c:	080028c3 	.word	0x080028c3
 8002830:	08002945 	.word	0x08002945
 8002834:	08002945 	.word	0x08002945
 8002838:	08002945 	.word	0x08002945
 800283c:	08002903 	.word	0x08002903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f8de 	bl	8002a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0208 	orr.w	r2, r2, #8
 800285a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0204 	bic.w	r2, r2, #4
 800286a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6999      	ldr	r1, [r3, #24]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	619a      	str	r2, [r3, #24]
      break;
 800287e:	e062      	b.n	8002946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f924 	bl	8002ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800289a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6999      	ldr	r1, [r3, #24]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	619a      	str	r2, [r3, #24]
      break;
 80028c0:	e041      	b.n	8002946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f96d 	bl	8002ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0208 	orr.w	r2, r2, #8
 80028dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0204 	bic.w	r2, r2, #4
 80028ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69d9      	ldr	r1, [r3, #28]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	61da      	str	r2, [r3, #28]
      break;
 8002900:	e021      	b.n	8002946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	4618      	mov	r0, r3
 800290a:	f000 f9b7 	bl	8002c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69da      	ldr	r2, [r3, #28]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69d9      	ldr	r1, [r3, #28]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	021a      	lsls	r2, r3, #8
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	61da      	str	r2, [r3, #28]
      break;
 8002942:	e000      	b.n	8002946 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002944:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <TIM_Base_SetConfig+0xa8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_Base_SetConfig+0x28>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002976:	d003      	beq.n	8002980 <TIM_Base_SetConfig+0x28>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <TIM_Base_SetConfig+0xac>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d108      	bne.n	8002992 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <TIM_Base_SetConfig+0xa8>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <TIM_Base_SetConfig+0x52>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d003      	beq.n	80029aa <TIM_Base_SetConfig+0x52>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <TIM_Base_SetConfig+0xac>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d108      	bne.n	80029bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <TIM_Base_SetConfig+0xa8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d103      	bne.n	80029f0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	615a      	str	r2, [r3, #20]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400

08002a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 0201 	bic.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0303 	bic.w	r3, r3, #3
 8002a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f023 0302 	bic.w	r3, r3, #2
 8002a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <TIM_OC1_SetConfig+0xc8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10c      	bne.n	8002a7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f023 0308 	bic.w	r3, r3, #8
 8002a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <TIM_OC1_SetConfig+0xc8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d111      	bne.n	8002aaa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	621a      	str	r2, [r3, #32]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40012c00 	.word	0x40012c00

08002ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0210 	bic.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0320 	bic.w	r3, r3, #32
 8002b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <TIM_OC2_SetConfig+0xd0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10d      	bne.n	8002b50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <TIM_OC2_SetConfig+0xd0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d113      	bne.n	8002b80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	40012c00 	.word	0x40012c00

08002ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	021b      	lsls	r3, r3, #8
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <TIM_OC3_SetConfig+0xd0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d10d      	bne.n	8002c22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <TIM_OC3_SetConfig+0xd0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d113      	bne.n	8002c52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	621a      	str	r2, [r3, #32]
}
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40012c00 	.word	0x40012c00

08002c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	031b      	lsls	r3, r3, #12
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <TIM_OC4_SetConfig+0x98>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d109      	bne.n	8002cf0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	019b      	lsls	r3, r3, #6
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	40012c00 	.word	0x40012c00

08002d18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e041      	b.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10c      	bne.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400

08002e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e03d      	b.n	8002ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e03f      	b.n	8002f44 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d106      	bne.n	8002ede <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7fd ff0f 	bl	8000cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2224      	movs	r2, #36	; 0x24
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fcbc 	bl	8003874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f0a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f1a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f2a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e021      	b.n	8002fa2 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2224      	movs	r2, #36	; 0x24
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f74:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd ff22 	bl	8000dc0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	f040 808c 	bne.w	80030e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_UART_Receive+0x2e>
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e084      	b.n	80030e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Receive+0x40>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e07d      	b.n	80030e6 <HAL_UART_Receive+0x13c>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2222      	movs	r2, #34	; 0x22
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003006:	f7fe f917 	bl	8001238 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d108      	bne.n	8003034 <HAL_UART_Receive+0x8a>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003044:	e043      	b.n	80030ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2120      	movs	r1, #32
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fa3b 	bl	80034cc <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e042      	b.n	80030e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10c      	bne.n	8003080 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003072:	b29a      	uxth	r2, r3
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	3302      	adds	r3, #2
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e01f      	b.n	80030c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	d007      	beq.n	800309a <HAL_UART_Receive+0xf0>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <HAL_UART_Receive+0xfe>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e008      	b.n	80030ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3301      	adds	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1b6      	bne.n	8003046 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	4613      	mov	r3, r2
 80030fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b20      	cmp	r3, #32
 8003106:	d11d      	bne.n	8003144 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Receive_IT+0x26>
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e016      	b.n	8003146 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_UART_Receive_IT+0x38>
 8003122:	2302      	movs	r3, #2
 8003124:	e00f      	b.n	8003146 <HAL_UART_Receive_IT+0x58>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	461a      	mov	r2, r3
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa10 	bl	8003560 <UART_Start_Receive_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	e000      	b.n	8003146 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08a      	sub	sp, #40	; 0x28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10d      	bne.n	80031a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_UART_IRQHandler+0x52>
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fac0 	bl	8003720 <UART_Receive_IT>
      return;
 80031a0:	e17b      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80b1 	beq.w	800330c <HAL_UART_IRQHandler+0x1bc>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_UART_IRQHandler+0x70>
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80a6 	beq.w	800330c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_UART_IRQHandler+0x90>
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d005      	beq.n	80031e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_UART_IRQHandler+0xb0>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d005      	beq.n	8003200 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f043 0202 	orr.w	r2, r3, #2
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_UART_IRQHandler+0xd0>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f043 0204 	orr.w	r2, r3, #4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00f      	beq.n	800324a <HAL_UART_IRQHandler+0xfa>
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <HAL_UART_IRQHandler+0xee>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f043 0208 	orr.w	r2, r3, #8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 811e 	beq.w	8003490 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_UART_IRQHandler+0x11e>
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fa59 	bl	8003720 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d102      	bne.n	8003296 <HAL_UART_IRQHandler+0x146>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d031      	beq.n	80032fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f99b 	bl	80035d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d023      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d013      	beq.n	80032ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	4a76      	ldr	r2, [pc, #472]	; (80034a0 <HAL_UART_IRQHandler+0x350>)
 80032c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe f936 	bl	8001540 <HAL_DMA_Abort_IT>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d016      	beq.n	8003308 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032e4:	4610      	mov	r0, r2
 80032e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e00e      	b.n	8003308 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fc ffba 	bl	8000264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	e00a      	b.n	8003308 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fc ffb6 	bl	8000264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f8:	e006      	b.n	8003308 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fc ffb2 	bl	8000264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003306:	e0c3      	b.n	8003490 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	bf00      	nop
    return;
 800330a:	e0c1      	b.n	8003490 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 80a1 	bne.w	8003458 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 809b 	beq.w	8003458 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 8095 	beq.w	8003458 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d04e      	beq.n	80033f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800335c:	8a3b      	ldrh	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 8098 	beq.w	8003494 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003368:	8a3a      	ldrh	r2, [r7, #16]
 800336a:	429a      	cmp	r2, r3
 800336c:	f080 8092 	bcs.w	8003494 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8a3a      	ldrh	r2, [r7, #16]
 8003374:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b20      	cmp	r3, #32
 800337e:	d02b      	beq.n	80033d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800338e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0210 	bic.w	r2, r2, #16
 80033cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe f879 	bl	80014ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f864 	bl	80034b6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033ee:	e051      	b.n	8003494 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d047      	beq.n	8003498 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003408:	8a7b      	ldrh	r3, [r7, #18]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d044      	beq.n	8003498 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800341c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0210 	bic.w	r2, r2, #16
 800344a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800344c:	8a7b      	ldrh	r3, [r7, #18]
 800344e:	4619      	mov	r1, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f830 	bl	80034b6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003456:	e01f      	b.n	8003498 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_UART_IRQHandler+0x324>
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8f0 	bl	8003652 <UART_Transmit_IT>
    return;
 8003472:	e012      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00d      	beq.n	800349a <HAL_UART_IRQHandler+0x34a>
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f931 	bl	80036f0 <UART_EndTransmit_IT>
    return;
 800348e:	e004      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
    return;
 8003490:	bf00      	nop
 8003492:	e002      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
      return;
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HAL_UART_IRQHandler+0x34a>
      return;
 8003498:	bf00      	nop
  }
}
 800349a:	3728      	adds	r7, #40	; 0x28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	0800362b 	.word	0x0800362b

080034a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034dc:	e02c      	b.n	8003538 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d028      	beq.n	8003538 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <UART_WaitOnFlagUntilTimeout+0x30>
 80034ec:	f7fd fea4 	bl	8001238 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d21d      	bcs.n	8003538 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800350a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2220      	movs	r2, #32
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e00f      	b.n	8003558 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	4013      	ands	r3, r2
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	429a      	cmp	r2, r3
 8003554:	d0c3      	beq.n	80034de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	88fa      	ldrh	r2, [r7, #6]
 8003578:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	88fa      	ldrh	r2, [r7, #6]
 800357e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2222      	movs	r2, #34	; 0x22
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035a4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0220 	orr.w	r2, r2, #32
 80035c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695a      	ldr	r2, [r3, #20]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0201 	bic.w	r2, r2, #1
 80035f8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d107      	bne.n	8003612 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0210 	bic.w	r2, r2, #16
 8003610:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7fc fe0d 	bl	8000264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b21      	cmp	r3, #33	; 0x21
 8003664:	d13e      	bne.n	80036e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	d114      	bne.n	800369a <UART_Transmit_IT+0x48>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d110      	bne.n	800369a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800368c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	1c9a      	adds	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	621a      	str	r2, [r3, #32]
 8003698:	e008      	b.n	80036ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	1c59      	adds	r1, r3, #1
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6211      	str	r1, [r2, #32]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4619      	mov	r1, r3
 80036ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	e000      	b.n	80036e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036e4:	2302      	movs	r3, #2
  }
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003706:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fec7 	bl	80034a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b22      	cmp	r3, #34	; 0x22
 8003732:	f040 8099 	bne.w	8003868 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373e:	d117      	bne.n	8003770 <UART_Receive_IT+0x50>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d113      	bne.n	8003770 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	b29a      	uxth	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	1c9a      	adds	r2, r3, #2
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
 800376e:	e026      	b.n	80037be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003782:	d007      	beq.n	8003794 <UART_Receive_IT+0x74>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <UART_Receive_IT+0x82>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	e008      	b.n	80037b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4619      	mov	r1, r3
 80037cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d148      	bne.n	8003864 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68da      	ldr	r2, [r3, #12]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0220 	bic.w	r2, r2, #32
 80037e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	2b01      	cmp	r3, #1
 8003810:	d123      	bne.n	800385a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0210 	bic.w	r2, r2, #16
 8003826:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b10      	cmp	r3, #16
 8003834:	d10a      	bne.n	800384c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff fe2f 	bl	80034b6 <HAL_UARTEx_RxEventCallback>
 8003858:	e002      	b.n	8003860 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fc fd64 	bl	8000328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e002      	b.n	800386a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038ae:	f023 030c 	bic.w	r3, r3, #12
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	430b      	orrs	r3, r1
 80038ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a2c      	ldr	r2, [pc, #176]	; (8003988 <UART_SetConfig+0x114>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d103      	bne.n	80038e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038dc:	f7fe fe1a 	bl	8002514 <HAL_RCC_GetPCLK2Freq>
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	e002      	b.n	80038ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038e4:	f7fe fe02 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 80038e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009a      	lsls	r2, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	4a22      	ldr	r2, [pc, #136]	; (800398c <UART_SetConfig+0x118>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	0119      	lsls	r1, r3, #4
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	009a      	lsls	r2, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003920:	4b1a      	ldr	r3, [pc, #104]	; (800398c <UART_SetConfig+0x118>)
 8003922:	fba3 0302 	umull	r0, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2064      	movs	r0, #100	; 0x64
 800392a:	fb00 f303 	mul.w	r3, r0, r3
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	3332      	adds	r3, #50	; 0x32
 8003934:	4a15      	ldr	r2, [pc, #84]	; (800398c <UART_SetConfig+0x118>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003940:	4419      	add	r1, r3
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009a      	lsls	r2, r3, #2
 800394c:	441a      	add	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	fbb2 f2f3 	udiv	r2, r2, r3
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <UART_SetConfig+0x118>)
 800395a:	fba3 0302 	umull	r0, r3, r3, r2
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	2064      	movs	r0, #100	; 0x64
 8003962:	fb00 f303 	mul.w	r3, r0, r3
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	3332      	adds	r3, #50	; 0x32
 800396c:	4a07      	ldr	r2, [pc, #28]	; (800398c <UART_SetConfig+0x118>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	f003 020f 	and.w	r2, r3, #15
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	440a      	add	r2, r1
 800397e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003980:	bf00      	nop
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40013800 	.word	0x40013800
 800398c:	51eb851f 	.word	0x51eb851f

08003990 <memset>:
 8003990:	4603      	mov	r3, r0
 8003992:	4402      	add	r2, r0
 8003994:	4293      	cmp	r3, r2
 8003996:	d100      	bne.n	800399a <memset+0xa>
 8003998:	4770      	bx	lr
 800399a:	f803 1b01 	strb.w	r1, [r3], #1
 800399e:	e7f9      	b.n	8003994 <memset+0x4>

080039a0 <__libc_init_array>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	2600      	movs	r6, #0
 80039a4:	4d0c      	ldr	r5, [pc, #48]	; (80039d8 <__libc_init_array+0x38>)
 80039a6:	4c0d      	ldr	r4, [pc, #52]	; (80039dc <__libc_init_array+0x3c>)
 80039a8:	1b64      	subs	r4, r4, r5
 80039aa:	10a4      	asrs	r4, r4, #2
 80039ac:	42a6      	cmp	r6, r4
 80039ae:	d109      	bne.n	80039c4 <__libc_init_array+0x24>
 80039b0:	f000 f81a 	bl	80039e8 <_init>
 80039b4:	2600      	movs	r6, #0
 80039b6:	4d0a      	ldr	r5, [pc, #40]	; (80039e0 <__libc_init_array+0x40>)
 80039b8:	4c0a      	ldr	r4, [pc, #40]	; (80039e4 <__libc_init_array+0x44>)
 80039ba:	1b64      	subs	r4, r4, r5
 80039bc:	10a4      	asrs	r4, r4, #2
 80039be:	42a6      	cmp	r6, r4
 80039c0:	d105      	bne.n	80039ce <__libc_init_array+0x2e>
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
 80039c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c8:	4798      	blx	r3
 80039ca:	3601      	adds	r6, #1
 80039cc:	e7ee      	b.n	80039ac <__libc_init_array+0xc>
 80039ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d2:	4798      	blx	r3
 80039d4:	3601      	adds	r6, #1
 80039d6:	e7f2      	b.n	80039be <__libc_init_array+0x1e>
 80039d8:	08003a28 	.word	0x08003a28
 80039dc:	08003a28 	.word	0x08003a28
 80039e0:	08003a28 	.word	0x08003a28
 80039e4:	08003a2c 	.word	0x08003a2c

080039e8 <_init>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	bf00      	nop
 80039ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ee:	bc08      	pop	{r3}
 80039f0:	469e      	mov	lr, r3
 80039f2:	4770      	bx	lr

080039f4 <_fini>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr
